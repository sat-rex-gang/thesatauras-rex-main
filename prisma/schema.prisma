// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // SAT-related fields
  satScores     SatScore[]
  practiceTests PracticeTest[]
  vocabProgress VocabProgress[]
  flashcardProgress UserFlashcardProgress[]

  @@map("users")
}

model SatScore {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  math      Int
  reading   Int
  writing   Int
  total     Int
  testDate  DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@map("sat_scores")
}

model PracticeTest {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int
  testType  String   // "math", "reading", "writing", "full"
  completedAt DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@map("practice_tests")
}

model VocabProgress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  word      String
  mastered  Boolean  @default(false)
  attempts  Int      @default(0)
  correct   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, word])
  @@map("vocab_progress")
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  flashcards Flashcard[]

  @@map("tags")
}

model Flashcard {
  id          String     @id @default(cuid())
  front       String
  back        String
  difficulty  String     @default("medium") // "easy", "medium", "hard"
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  tags        Tag[]
  progress    UserFlashcardProgress[]

  @@map("flashcards")
}

model UserFlashcardProgress {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcardId   String
  flashcard     Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  // Progress tracking
  mastered      Boolean   @default(false)
  attempts      Int       @default(0)
  correct       Int       @default(0)
  lastReviewed  DateTime?
  nextReview    DateTime?
  easeFactor    Float     @default(2.5) //for spaced repetition
  interval      Int       @default(1)   //days between reviews

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, flashcardId])
  @@map("user_flashcard_progress")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String
  firstName     String?
  lastName      String?
  profilePicture String? // URL or base64 for profile picture
  bio           String?  // User biography
  totalQuestionsAnswered Int @default(0) // Track total single player questions answered
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // SAT-related fields
  satScores     SatScore[]
  practiceTests PracticeTest[]
  vocabProgress VocabProgress[]
  vocabState    VocabState?
  flashcardProgress UserFlashcardProgress[]
  multiplayerGamesCreated MultiplayerGame[] @relation("GameCreator")
  multiplayerGamePlayers MultiplayerPlayer[]

  @@map("users")
}

model SatScore {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  math      Int
  reading   Int
  writing   Int
  total     Int
  testDate  DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@map("sat_scores")
}

model PracticeTest {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int
  testType  String   // "math", "reading", "writing", "full"
  completedAt DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@map("practice_tests")
}

model VocabProgress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  word      String
  mastered  Boolean  @default(false)
  attempts  Int      @default(0)
  correct   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, word])
  @@map("vocab_progress")
}

model VocabState {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentIndex  Int      @default(0)
  activeTab     String   @default("unseen")
  searchTerm    String   @default("")
  showWordFirst Boolean  @default(true)
  isShuffled    Boolean  @default(false)
  knownWords    String   @default("[]")
  unknownWords  String   @default("[]")
  starredWords  String   @default("[]")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("vocab_state")
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  flashcards Flashcard[]

  @@map("tags")
}

model Flashcard {
  id          String     @id @default(cuid())
  front       String
  back        String
  difficulty  String     @default("medium") // "easy", "medium", "hard"
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  tags        Tag[]
  progress    UserFlashcardProgress[]

  @@map("flashcards")
}

model UserFlashcardProgress {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcardId   String
  flashcard     Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  // Progress tracking
  mastered      Boolean   @default(false)
  attempts      Int       @default(0)
  correct       Int       @default(0)
  lastReviewed  DateTime?
  nextReview    DateTime?
  easeFactor    Float     @default(2.5) //for spaced repetition
  interval      Int       @default(1)   //days between reviews

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, flashcardId])
  @@map("user_flashcard_progress")
}

model MultiplayerGame {
  id           String   @id @default(cuid())
  gameCode     String   @unique // 6-digit code
  creatorId    String
  creator      User     @relation("GameCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  players      MultiplayerPlayer[]
  
  // Game settings
  category     String   // "math" or "english"
  questionType String?  // Specific section/topic
  numRounds    Int      @default(5)
  gameMode     String   @default("fast") // "fast" or "timed"
  timeLimit    Int?     // Seconds per question (for timed mode)
  
  // Game state
  status       String   @default("waiting") // "waiting", "active", "finished", "forfeited"
  currentRound Int      @default(0)
  currentQuestion String? // JSON string of current question data
  questions    String   @default("[]") // JSON array of question indices
  gameQuestions String? // JSON array of all questions used in the game (for history)
  
  // Timer state (for timed mode)
  questionStartTime DateTime?
  roundStartTime    DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("multiplayer_games")
}

model MultiplayerPlayer {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameId       String
  game         MultiplayerGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  // Player state
  score        Int      @default(0)
  currentAnswer String? // Current round answer
  answeredAt   DateTime?
  isReady      Boolean  @default(false)
  hasForfeited Boolean  @default(false)
  wantsRematch Boolean  @default(false)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, gameId])
  @@map("multiplayer_players")
}
